# name: CI/CD Pipeline

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main ]

# env:
#   DOTNET_VERSION: '8.0.x'
#   DOCKER_IMAGE: 'resume-generator-api'

# jobs:
#   test:
#     name: Run Tests
#     runs-on: ubuntu-latest
    
#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_DB: resumegenerator_test
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: postgres
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 5432:5432

#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Setup .NET
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: ${{ env.DOTNET_VERSION }}
    
#     - name: Cache dependencies
#       uses: actions/cache@v3
#       with:
#         path: ~/.nuget/packages
#         key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
#         restore-keys: |
#           ${{ runner.os }}-nuget-
    
#     - name: Restore dependencies
#       run: dotnet restore
    
#     - name: Build
#       run: dotnet build --no-restore --configuration Release
    
#     - name: Run unit tests
#       run: |
#         dotnet test \
#           --no-build \
#           --configuration Release \
#           --logger trx \
#           --collect:"XPlat Code Coverage" \
#           --results-directory ./TestResults \
#           --filter Category=Unit
    
#     - name: Run integration tests
#       env:
#         ConnectionStrings__DefaultConnection: "Host=localhost;Database=resumegenerator_test;Username=postgres;Password=postgres"
#         ClaudeApi__ApiKey: "test-key"
#         OpenAI__ApiKey: "test-key"
#       run: |
#         dotnet test \
#           --no-build \
#           --configuration Release \
#           --logger trx \
#           --collect:"XPlat Code Coverage" \
#           --results-directory ./TestResults \
#           --filter Category=Integration
    
#     - name: Generate code coverage report
#       uses: codecov/codecov-action@v3
#       with:
#         files: ./TestResults/*/coverage.cobertura.xml
#         fail_ci_if_error: false
    
#     - name: Upload test results
#       uses: actions/upload-artifact@v3
#       if: always()
#       with:
#         name: test-results
#         path: ./TestResults

#   security-scan:
#     name: Security Scan
#     runs-on: ubuntu-latest
#     needs: test
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Setup .NET
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: ${{ env.DOTNET_VERSION }}
    
#     - name: Restore dependencies
#       run: dotnet restore
    
#     - name: Run security scan
#       run: |
#         dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.txt
#         if grep -q "has the following vulnerable packages" security-scan.txt; then
#           echo "Vulnerable packages found!"
#           exit 1
#         fi
    
#     - name: Upload security scan results
#       uses: actions/upload-artifact@v3
#       if: always()
#       with:
#         name: security-scan
#         path: security-scan.txt

#   build-and-push:
#     name: Build and Push Docker Image
#     runs-on: ubuntu-latest
#     needs: [test, security-scan]
#     if: github.ref == 'refs/heads/main'
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3
    
#     - name: Log in to Docker Hub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}
    
#     - name: Extract metadata
#       id: meta
#       uses: docker/metadata-action@v5
#       with:
#         images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}
#         tags: |
#           type=ref,event=branch
#           type=ref,event=pr
#           type=sha,prefix={{branch}}-
#           type=raw,value=latest,enable={{is_default_branch}}
    
#     - name: Build and push Docker image
#       uses: docker/build-push-action@v5
#       with:
#         context: .
#         platforms: linux/amd64,linux/arm64
#         push: true
#         tags: ${{ steps.meta.outputs.tags }}
#         labels: ${{ steps.meta.outputs.labels }}
#         cache-from: type=gha
#         cache-to: type=gha,mode=max

#   deploy-staging:
#     name: Deploy to Staging
#     runs-on: ubuntu-latest
#     needs: build-and-push
#     if: github.ref == 'refs/heads/main'
#     environment: staging
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Deploy to Digital Ocean App Platform
#       uses: digitalocean/app_action@v1.1.5
#       with:
#         app_name: resume-generator-staging
#         token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#         images: '[{
#           "name": "api",
#           "image": {
#             "registry_type": "DOCKER_HUB",
#             "repository": "${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}",
#             "tag": "main-${{ github.sha }}"
#           }
#         }]'

#   deploy-production:
#     name: Deploy to Production
#     runs-on: ubuntu-latest
#     needs: deploy-staging
#     if: github.ref == 'refs/heads/main'
#     environment: production
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Deploy to Digital Ocean App Platform
#       uses: digitalocean/app_action@v1.1.5
#       with:
#         app_name: resume-generator-production
#         token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#         images: '[{
#           "name": "api",
#           "image": {
#             "registry_type": "DOCKER_HUB",
#             "repository": "${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}",
#             "tag": "main-${{ github.sha }}"
#           }
#         }]'

#   notify:
#     name: Notify Deployment
#     runs-on: ubuntu-latest
#     needs: [deploy-production]
#     if: always()
    
#     steps:
#     - name: Notify Slack
#       uses: 8398a7/action-slack@v3
#       with:
#         status: ${{ job.status }}
#         channel: '#deployments'
#         text: |
#           Deployment Status: ${{ job.status }}
#           Repository: ${{ github.repository }}
#           Branch: ${{ github.ref_name }}
#           Commit: ${{ github.sha }}
#           Author: ${{ github.actor }}
#       env:
#         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#       if: always()